[tool.poetry]
name = "{{ project_name }}"
version = "0.1.0"
description = ""
authors = ["Oliver Andrich <oliver@andrich.me>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
django = { extras = ["argon2"], version = "^5.0" }
django-browser-reload = "^1.12.1"
django-htmx = "^1.17.2"
pytz = "^2023.3"
whitenoise = { extras = ["brotli"], version = "^6.6.0" }
django-tailwind-cli = { extras = ["django-extensions"], version = "^2.7.2" }
gunicorn = "^21.2.0"
environs = {extras = ["django"], version = "^10.0.0"}
django-dirtyfields = "^1.9.2"

[tool.poetry.group.dev.dependencies]
django-types = "^0.19.1"
ipdb = "^0.13.13"
model-bakery = "^1.17.0"
pre-commit = "^3.6.0"
django-test-plus = "^2.2.3"
pytest = "^7.4.3"
pytest-django = "^4.7.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ["py311"]
line-length = 100
skip-string-normalization = true

[tool.pyright]
venvPath = "."
venv = ".venv"
typeCheckingMode = "basic"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "{{ project_name }}.settings"
python_files = ["test_*.py", "*_test.py", "tests.py"]

[tool.coverage.run]
source = ["."]
branch = true

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.curlylint]
include = '\.(html|jinja)$'
exclude = '''
(
  /(
      \.eggs           # exclude a few common directories in the root of the project
    | \.git
    | \.venv
    | \.ruff_cache
  )/
  | webpack-stats.html # also separately exclude a file named webpack-stats.html in the root of the project
)
'''

[tool.curlylint.rules]
indent = 4
aria_role = true
django_forms_rendering = true
image_alt = true
meta_viewport = true
no_autofocus = true
tabindex_no_positive = true

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
  # Don't touch unused variables
  "F841",
]

[tool.ruff.isort]
known-first-party = ["{{ project_name }}"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"tests.py" = ["PLR2004", "S101", "TID252"]
